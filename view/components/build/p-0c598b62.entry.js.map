{"version":3,"sources":["src/components/logsPage/log-table-wrapper/log-table-wrapper.tsx","src/components/logsPage/logs-table/logs-table.tsx"],"names":["LogTableWrapper","[object Object]","hostRef","this","page","isLoading","isLoadingError","toggleSort","rowPerPage","sort","a","b","limit","slice","shift","fetchData","api","sortObj","search","then","res","data","respond","map","item","isCustomQuery","total","autocompute","computeHeader","catch","error","console","log","firstObjectOfData","Object","keys","headerList","title","alias","filter","searchable","test","sortable","e","target","value","colName","length","includes","id","dir","searchValue","h","Host","tableBody","tableHeader","currentPage","dataLength","next","nextPage","prev","prevPage","rows","rowsHandler","toggleSortMethod","searchMethod","field","clearSearch","xmlns","class","viewBox","fill","d","fill-rule","clip-rule","LogsTable","isSearchMenuOpen","from","to","click","clickable","Date","toString","split","href","url","src","icon","alt","trList","i","push","style","overflowY","maxWidth","maxHeight","overflow","scope","_a","onClick","_b","colSpan","rowSpan","text-overflow:ellipsis","max-width","dataFormatter","Number","onChange","row","color","type","clickHandler","disabledHandler","addClass","parseInt"],"mappings":"sDAQaA,EAAe,MAJ5BC,YAAAC,aAWWC,KAAAC,KAAO,EACPD,KAAAE,UAAY,MACZF,KAAAG,eAAiB,MAIjBH,KAAAI,WAAa,KAOtBN,oBACEE,KAAKK,WAAaL,KAAKK,WAAWC,MAAK,CAACC,EAAGC,IAAMD,EAAIC,IACrDR,KAAKS,MAAQT,KAAKK,WAAWK,MAAM,EAAG,GAAGC,QACzCX,KAAKY,YAGPd,YACEE,KAAKE,UAAY,KACjBF,KAAKG,eAAiB,MACtBH,KAAKa,IAAIb,KAAKS,MAAOT,KAAKC,KAAMD,KAAKc,QAASd,KAAKe,QAChDC,MAAKC,IACJA,EAAIC,KAAKC,QAAQC,KAAIC,IAAOA,EAAKC,gBAAgB,KAAMD,EAAK,iBAAiB,eAAgBA,EAAK,iBAAiB,mBACnHrB,KAAKuB,MAAQN,EAAIC,KAAKK,MACtBvB,KAAKkB,KAAOD,EAAIC,KAAKC,QACrB,GAAInB,KAAKwB,YAAaxB,KAAKyB,gBAC3BzB,KAAKE,UAAY,SAElBwB,OAAMC,IACLC,QAAQC,IAAIF,GACZ3B,KAAKG,eAAiB,KACtBH,KAAKE,UAAY,SAIvBJ,gBACE,MAAMgC,EAAoBC,OAAOC,KAAKhC,KAAKkB,KAAKR,MAAM,EAAG,GAAGC,SAC5DX,KAAKiC,WAAaH,EAAkBV,KAAIC,IAC/B,CACLa,MAAOb,EACPc,MAAOd,EACPe,OAAQ,CACNC,YAAa,UAAUC,KAAKtC,KAAKkB,KAAKR,MAAM,EAAG,GAAGC,QAAQ,GAAGU,MAC7DkB,SAAU,UAAUD,KAAKtC,KAAKkB,KAAKR,MAAM,EAAG,GAAGC,QAAQ,GAAGU,WAMlEvB,YAAY0C,GACVxC,KAAKS,MAAQ+B,EAAEC,OAAOC,MACtB1C,KAAKC,KAAO,EACZD,KAAKc,QAAU,GACfd,KAAKY,YAGPd,YAAY6C,GACV,GAAIZ,OAAOC,KAAKhC,KAAKe,QAAQ6B,QAAU,EAAG,CACxC,IAAIZ,EAAOD,OAAOC,KAAKhC,KAAKe,QAC5B,GAAIiB,EAAKa,SAASF,GAAU,QACnB3C,KAAKe,OAAO4B,IAGvB3C,KAAKY,YAGPd,aACIE,KAAKC,KACPD,KAAKY,YAGPd,aACIE,KAAKC,KACPD,KAAKY,YAGPd,iBAAiBgD,GACf9C,KAAKc,QAAU,CAAEgC,GAAIA,EAAIC,IAAK/C,KAAKI,WAAa,MAAQ,QACxDJ,KAAKC,KAAO,EACZD,KAAKI,YAAcJ,KAAKI,WACxBJ,KAAKY,YAGPd,aAAakD,EAAqBL,GAChC,GAAI3C,KAAKe,OAAQ,CACff,KAAKe,OAAO4B,GAAWK,MAClB,CACLhD,KAAKe,OAAS,GACdf,KAAKe,OAAO4B,GAAWK,EAEzBhD,KAAKY,YAGPd,SACE,OACEmD,EAACC,EAAI,KACHD,EAAA,aAAA,CACE/C,UAAWF,KAAKE,UAChBC,eAAgBH,KAAKG,eACrBgD,UAAWnD,KAAKkB,KAChBkC,YAAapD,KAAKiC,WAClBoB,YAAarD,KAAKC,KAClBqD,WAAYtD,KAAKuB,MACjBgC,KAAM,IAAMvD,KAAKwD,WACjBC,KAAM,IAAMzD,KAAK0D,WACjBjD,MAAOT,KAAKS,MACZkD,KAAM3D,KAAKK,WACXuD,YAAapB,GAAKxC,KAAK4D,YAAYpB,GACnCqB,iBAAkBf,GAAM9C,KAAK6D,iBAAiBf,GAC9CgB,aAAc,CAACpB,EAAOqB,IAAU/D,KAAK8D,aAAapB,EAAOqB,GACzDC,YAAarB,GAAW3C,KAAKgE,YAAYrB,QC7HnD,MAAMrC,EACJ2C,EAAA,MAAA,CAAKgB,MAAM,6BAA6BC,MAAM,iCAAiCC,QAAQ,YAAYC,KAAK,gBACtGnB,EAAA,OAAA,CAAMoB,EAAE,4OAIZ,MAAMtD,EACJkC,EAAA,MAAA,CAAKgB,MAAM,6BAA6BC,MAAM,iCAAiCC,QAAQ,YAAYC,KAAK,gBACtGnB,EAAA,OAAA,CAAAqB,YAAgB,UAAUD,EAAE,mHAAkHE,YAAW,iBAQhJC,EAAS,MAJtB1E,YAAAC,aAuBWC,KAAAyE,iBAAmB,MAG5B3E,sBACEE,KAAK0E,MAAQ1E,KAAKqD,YAAc,GAAKrD,KAAKS,MAAQ,EAClDT,KAAK2E,GAAK3E,KAAKqD,YAAcrD,KAAKS,MAEpCX,cAAcgD,EAAIzB,GAChB,CACE,GAAIyB,EAAG8B,MAAMC,YAAc,MAAO,CAChC,GAAIxD,EAAKyB,EAAGX,OAAOS,OAAS,KAAO,KAAM,CACvC,OAAOvB,EAAKyB,EAAGX,OAAOzB,MAAM,EAAG,IAAM,UAChC,CACL,GAAI,8CAA8C4B,KAAKjB,EAAKyB,EAAGX,QAAS,CACtE,OAAO,IAAI2C,KAAKzD,EAAKyB,EAAGX,QAAQ4C,WAAWC,MAAM,KAAK,OACjD,CACL,GAAIlC,EAAGX,QAAU,YAAa,CAC5B,MAAO,GAAGd,EAAKyB,EAAGX,gBACb,CACL,OAAOd,EAAKyB,EAAGX,cAIhB,CACL,GAAIW,EAAGX,QAAU,cAAe,CAC9B,OACEc,EAAA,IAAA,CAAGR,OAAO,SAASwC,KAAMnC,EAAG8B,MAAMM,IAAM7D,EAAKyB,EAAGX,OAAQ+B,MAAM,0FAC5DjB,EAAA,MAAA,CAAKiB,MAAM,MAAMiB,IAAKrC,EAAG8B,MAAMQ,KAAMC,IAAI,SACzCpC,EAAA,OAAA,CAAMiB,MAAM,SAAO,cAGlB,GAAIpB,EAAGX,QAAU,QAAS,CAC/B,OACEc,EAAA,IAAA,CAAGgC,KAAMnC,EAAG8B,MAAMM,IAAM7D,EAAK,YAC3B4B,EAAA,OAAA,CAAMiB,MAAM,SAAS7C,EAAKyB,EAAGX,YAQzCrC,SACE,MAAMwF,EAAS,GACf,IAAK,IAAIC,EAAI,EAAGA,EAAIvF,KAAK2D,KAAK,GAAI4B,IAAK,CACrCD,EAAOE,KACLvC,EAAA,KAAA,KACEA,EAAA,KAAA,CAAIiB,MAAM,qDAAmD,OAKnE,OACEjB,EAAA,MAAA,CAAKwC,MAAO,CAAEC,UAAW,SACvBzC,EAAA,MAAA,CAAKiB,MAAM,oBAAoBuB,MAAO,CAAEE,SAAU,QAASC,UAAW,QAASC,SAAU,SACvF5C,EAAA,QAAA,CAAOiB,MAAM,yFAEXjB,EAAA,QAAA,CAAOiB,MAAM,4BACXjB,EAAA,KAAA,KACGjD,KAAKoD,YAAYhC,KAAKC,YAAc,OACnC4B,EAAA,KAAA,CAAI6C,MAAM,MAAM5B,MAAM,wGACnB7C,EAAKa,QAEL6D,EAAA1E,IAAI,MAAJA,SAAI,OAAA,EAAJA,EAAMe,UAAM,MAAA2D,SAAA,OAAA,EAAAA,EAAExD,WACbU,EAAA,SAAA,CAAQiB,MAAM,OAAO8B,QAAS,IAAMhG,KAAK6D,iBAAiBxC,EAAKa,QAC5D5B,KAIJ2F,EAAA5E,IAAI,MAAJA,SAAI,OAAA,EAAJA,EAAMe,UAAM,MAAA6D,SAAA,OAAA,EAAAA,EAAE5D,aACbY,EAAA,YAAA,CAAWa,aAAc,CAACpB,EAAOqB,IAAU/D,KAAK8D,aAAapB,EAAOqB,GAAQ5B,MAAOd,EAAKc,MAAO6B,YAAarB,GAAW3C,KAAKgE,YAAYrB,IACrI5B,OAKRf,KAAKE,WAAa+C,EAAA,KAAA,CAAIiB,MAAM,kBAAgB,OAKhDlE,KAAKE,WACJ+C,EAAA,QAAA,KACEA,EAAA,KAAA,KACEA,EAAA,KAAA,CAAIiD,QAASlG,KAAKoD,YAAYR,OAAQuD,QAAS,GAAIjC,MAAM,qDACvDjB,EAAA,mBAAA,OAEFA,EAAA,KAAA,CAAIiB,MAAM,qDAAmD,MAG9DoB,GAILrC,EAAA,QAAA,CAAOiB,MAAM,qCAEVlE,KAAKmD,YACHnD,KAAKE,YACLF,KAAKG,gBACNH,KAAKmD,UAAU/B,KAAKC,GAClB4B,EAAA,KAAA,CAAIiB,MAAM,gCACPlE,KAAKoD,YAAYhC,KAAK0B,GACrBG,EAAA,KAAA,CAAAmD,yBAAA,KAA2BlE,MAAOb,EAAKyB,EAAGX,OAAMkE,YAAY,OAAOnC,MAAM,qDACtElE,KAAKsG,cAAcxD,EAAIzB,WAQlCrB,KAAKE,WAAaF,KAAKG,gBACvB8C,EAAA,QAAA,KACEA,EAAA,KAAA,KACEA,EAAA,KAAA,CAAIiD,QAASlG,KAAKoD,YAAYR,OAAQuD,QAAS,GAAIjC,MAAM,iEACvDjB,EAAA,IAAA,KAAA,gBAEFA,EAAA,KAAA,CAAIiB,MAAM,qDAAmD,MAE9DoB,KAKTrC,EAAA,MAAA,CAAKwC,MAAO,CAAEE,SAAU,SAAWzB,MAAM,+BACvCjB,EAAA,MAAA,CAAKiB,MAAM,kFACTjB,EAAA,MAAA,CAAKiB,MAAM,qCAETjB,EAAA,IAAA,KAAA,WACUA,EAAA,SAAA,KAASjD,KAAK0E,MAAc,OAAIzB,EAAA,SAAA,KAASjD,KAAK2E,IAAM4B,OAAOvG,KAAKsD,YAActD,KAAK2E,GAAK3E,KAAKsD,YAAoB,OAAIL,EAAA,SAAA,KAASjD,KAAKsD,YAAqB,IAAG,WAKrKL,EAAA,MAAA,CAAKiB,MAAM,aACTjB,EAAA,OAAA,KAAA,iBACAA,EAAA,SAAA,CACEuD,SAAUhE,GAAKxC,KAAK4D,YAAYpB,GAChC0B,MAAM,sOAELlE,KAAK2D,KAAKvC,KAAIqF,GACbxD,EAAA,SAAA,CAAQP,MAAO,GAAG+D,KAAQA,OAMhCxD,EAAA,MAAA,CAAKiB,MAAM,2BACTjB,EAAA,eAAA,CAAcyD,MAAM,WAAWC,KAAK,OAAOC,aAAc,IAAM5G,KAAKyD,OAAQoD,gBAAiB7G,KAAKqD,cAAgB,EAAGyD,SAAS,uBAAqB,QAGnJ7D,EAAA,eAAA,CAAcyD,MAAM,WAAWC,KAAK,OAAOC,aAAc,IAAM5G,KAAKuD,OAAQsD,gBAAiBE,SAAS/G,KAAKsD,aAAetD,KAAK2E,GAAImC,SAAS,uBAAqB,WAMtK9G,KAAKE,WAAa+C,EAAA,KAAA,CAAIiB,MAAM,iBAAe","sourcesContent":["import { Component, h, Host, Prop, State } from '@stencil/core';\n\n// let renders = 0;\n\n@Component({\n  tag: 'log-table-wrapper',\n  scoped: true,\n})\nexport class LogTableWrapper {\n  @Prop() rowPerPage: number[];\n  @Prop() api: any;\n  @Prop() headerList: object[];\n  @Prop() autocompute: boolean;\n\n  @State() data: object[];\n  @State() page = 1;\n  @State() isLoading = false;\n  @State() isLoadingError = false;\n  @State() total: string;\n  @State() limit: number;\n  @State() tBody: any;\n  @State() toggleSort = true;\n  @State() sortId: string;\n  @State() sortDir: string;\n  @State() sortObj: object;\n  // @State() search: object[];\n  @State() search: object;\n\n  componentWillLoad() {\n    this.rowPerPage = this.rowPerPage.sort((a, b) => a - b);\n    this.limit = this.rowPerPage.slice(0, 1).shift();\n    this.fetchData();\n  }\n\n  fetchData() {\n    this.isLoading = true;\n    this.isLoadingError = false;\n    this.api(this.limit, this.page, this.sortObj, this.search)\n      .then(res => {\n        res.data.respond.map(item=>{item.isCustomQuery===true? item[\"isCustomQuery\"]=\"Custom Query\": item[\"isCustomQuery\"]=\"Builder Query\"});\n        this.total = res.data.total;\n        this.data = res.data.respond;\n        if (this.autocompute) this.computeHeader();\n        this.isLoading = false;\n      })\n      .catch(error => {\n        console.log(error);\n        this.isLoadingError = true;\n        this.isLoading = false;\n      });\n  }\n\n  computeHeader() {\n    const firstObjectOfData = Object.keys(this.data.slice(0, 1).shift());\n    this.headerList = firstObjectOfData.map(item => {\n      return {\n        title: item,\n        alias: item,\n        filter: {\n          searchable: !/^-?\\d+$/.test(this.data.slice(0, 1).shift()[`${item}`]),\n          sortable: /^-?\\d+$/.test(this.data.slice(0, 1).shift()[`${item}`]),\n        },\n      };\n    });\n  }\n\n  rowsHandler(e) {\n    this.limit = e.target.value;\n    this.page = 1;\n    this.sortObj = {};\n    this.fetchData();\n  }\n\n  clearSearch(colName) {\n    if (Object.keys(this.search).length >= 1) {\n      let keys = Object.keys(this.search);\n      if (keys.includes(colName)) {\n        delete this.search[colName];\n      }\n    }\n    this.fetchData();\n  }\n\n  nextPage() {\n    ++this.page;\n    this.fetchData();\n  }\n\n  prevPage() {\n    --this.page;\n    this.fetchData();\n  }\n\n  toggleSortMethod(id: string) {\n    this.sortObj = { id: id, dir: this.toggleSort ? 'asc' : 'desc' };\n    this.page = 1;\n    this.toggleSort = !this.toggleSort;\n    this.fetchData();\n  }\n\n  searchMethod(searchValue: string, colName: string) {\n    if (this.search) {\n      this.search[colName] = searchValue;\n    } else {\n      this.search = [];\n      this.search[colName] = searchValue;\n    }\n    this.fetchData();\n  }\n\n  render() {\n    return (\n      <Host>\n        <logs-table\n          isLoading={this.isLoading}\n          isLoadingError={this.isLoadingError}\n          tableBody={this.data}\n          tableHeader={this.headerList}\n          currentPage={this.page}\n          dataLength={this.total}\n          next={() => this.nextPage()}\n          prev={() => this.prevPage()}\n          limit={this.limit}\n          rows={this.rowPerPage}\n          rowsHandler={e => this.rowsHandler(e)}\n          toggleSortMethod={id => this.toggleSortMethod(id)}\n          searchMethod={(value, field) => this.searchMethod(value, field)}\n          clearSearch={colName => this.clearSearch(colName)}\n        ></logs-table>\n      </Host>\n    );\n  }\n}\n","import { Component, h, Prop, State } from '@stencil/core';\n\nconst sort = (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"inline h-4 w-4 text-indigo-600\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n    <path d=\"M5 12a1 1 0 102 0V6.414l1.293 1.293a1 1 0 001.414-1.414l-3-3a1 1 0 00-1.414 0l-3 3a1 1 0 001.414 1.414L5 6.414V12zM15 8a1 1 0 10-2 0v5.586l-1.293-1.293a1 1 0 00-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L15 13.586V8z\" />\n  </svg>\n);\n\nconst search = (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"inline h-4 w-4 text-indigo-600\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n    <path fill-rule=\"evenodd\" d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\" clip-rule=\"evenodd\" />\n  </svg>\n);\n\n@Component({\n  tag: 'logs-table',\n  scoped: true,\n})\nexport class LogsTable {\n  @Prop() tableHeader: object[];\n  @Prop() tableBody: object[];\n  @Prop() currentPage: number;\n  @Prop() dataLength: string;\n  @Prop() next: any;\n  @Prop() prev: any;\n  @Prop() limit: number;\n  @Prop() rows: number[];\n  @Prop() rowsHandler: any;\n  @Prop() toggleSortMethod: any;\n  @Prop() searchMethod: any;\n  @Prop() clearSearch: any;\n  @Prop() isLoading: boolean;\n  @Prop() isLoadingError: boolean;\n\n  @State() data: any;\n  @State() from: number;\n  @State() to: number;\n  @State() isSearchMenuOpen = false;\n  @State() value: string;\n\n  componentWillRender() {\n    this.from = (this.currentPage - 1) * this.limit + 1;\n    this.to = this.currentPage * this.limit;\n  }\n  dataFormatter(id, item) {\n    {\n      if (id.click.clickable === false) {\n        if (item[id.alias].length > 25 === true) {\n          return item[id.alias].slice(0, 25) + '...';\n        } else {\n          if (/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z/.test(item[id.alias])) {\n            return new Date(item[id.alias]).toString().split('(')[0];\n          } else {\n            if (id.alias === 'timeTaken') {\n              return `${item[id.alias]} ms`;\n            } else {\n              return item[id.alias];\n            }\n          }\n        }\n      } else {\n        if (id.alias === 'queryResult') {\n          return (\n            <a target=\"_blank\" href={id.click.url + item[id.alias]} class=\"flex items-center py-1 px-4 text-base font-normal text-gray-900 rounded-lg bg-gray-200\">\n              <img class=\"h-4\" src={id.click.icon} alt=\"icon\" />\n              <span class=\"px-2 \">View</span>\n            </a>\n          );\n        } else if (id.alias === 'email') {\n          return (\n            <a href={id.click.url + item['ownerId']}>\n              <span class=\"px-2 \">{item[id.alias]}</span>\n            </a>\n          );\n        }\n      }\n    }\n  }\n\n  render() {\n    const trList = [];\n    for (let i = 1; i < this.rows[0]; i++) {\n      trList.push(\n        <tr>\n          <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">&nbsp;</td>\n        </tr>,\n      );\n    }\n\n    return (\n      <div style={{ overflowY: 'auto' }}>\n        <div class=\"custom-scrollbar \" style={{ maxWidth: '75rem', maxHeight: '580px', overflow: 'auto' }}>\n          <table class=\"table-auto h-full min-w-full divide-y border border-gray-100 divide-gray-200 relative\">\n            {/* Table Head */}\n            <thead class=\"bg-gray-100 sticky top-0\">\n              <tr>\n                {this.tableHeader.map((item: any) => (\n                  <th scope=\"col\" class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 hover:text-indigo-700 uppercase tracking-wider\">\n                    {item.title}\n\n                    {item?.filter?.sortable && (\n                      <button class=\"ml-3\" onClick={() => this.toggleSortMethod(item.title)}>\n                        {sort}\n                      </button>\n                    )}\n\n                    {item?.filter?.searchable && (\n                      <drop-down searchMethod={(value, field) => this.searchMethod(value, field)} alias={item.alias} clearSearch={colName => this.clearSearch(colName)}>\n                        {search}\n                      </drop-down>\n                    )}\n                  </th>\n                ))}\n                {this.isLoading && <th class=\"text-gray-500 \">&nbsp;</th>}\n              </tr>\n            </thead>\n\n            {/* loading screen */}\n            {this.isLoading && (\n              <tbody>\n                <tr>\n                  <td colSpan={this.tableHeader.length} rowSpan={10} class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    <loader-component></loader-component>\n                  </td>\n                  <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">&nbsp;</td>\n                </tr>\n\n                {trList}\n              </tbody>\n            )}\n\n            <tbody class=\"bg-white divide-y divide-gray-200\">\n              {/* loaded body */}\n              {this.tableBody &&\n                !this.isLoading &&\n                !this.isLoadingError &&\n                this.tableBody.map((item: any) => (\n                  <tr class=\"hover:bg-gray-100 transition\">\n                    {this.tableHeader.map((id: any) => (\n                      <td text-overflow:ellipsis title={item[id.alias]} max-width=\"50px\" class=\"px-6 py-3 whitespace-nowrap text-sm text-gray-900\">\n                        {this.dataFormatter(id, item)}\n                      </td>\n                    ))}\n                  </tr>\n                ))}\n            </tbody>\n\n            {/* error screen */}\n            {!this.isLoading && this.isLoadingError && (\n              <tbody>\n                <tr>\n                  <td colSpan={this.tableHeader.length} rowSpan={10} class=\"px-6 py-4 whitespace-nowrap text-sm text-center text-gray-900\">\n                    <p>Error Found</p>\n                  </td>\n                  <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">&nbsp;</td>\n                </tr>\n                {trList}\n              </tbody>\n            )}\n          </table>\n        </div>\n        <div style={{ maxWidth: '75rem' }} class=\"bg-gray-100 sticky bottom-0\">\n          <div class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n            <div class=\"flex justify-between items-center\">\n              {/* pagination description */}\n              <p>\n                Showing <strong>{this.from}</strong> to <strong>{this.to <= Number(this.dataLength) ? this.to : this.dataLength}</strong> of <strong>{this.dataLength}</strong>{' '}\n                results\n              </p>\n\n              {/* rows per page  */}\n              <div class=\"space-x-3\">\n                <span>Rows per page</span>\n                <select\n                  onChange={e => this.rowsHandler(e)}\n                  class=\"form-select px-3 py-1.5 border-none text-inherit font-inherit text-gray-700 bg-transparent bg-clip-padding bg-no-repeat rounded transition ease-in-out focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none\"\n                >\n                  {this.rows.map(row => (\n                    <option value={`${row}`}>{row}</option>\n                  ))}\n                </select>\n              </div>\n\n              {/* pagination navigation menu */}\n              <nav class=\"flex gap-4 items-center\">\n                <plain-button color=\"gray-500\" type=\"text\" clickHandler={() => this.prev()} disabledHandler={this.currentPage === 1} addClass=\"disabled:opacity-50\">\n                  prev\n                </plain-button>\n                <plain-button color=\"gray-500\" type=\"text\" clickHandler={() => this.next()} disabledHandler={parseInt(this.dataLength) <= this.to} addClass=\"disabled:opacity-50\">\n                  next\n                </plain-button>\n              </nav>\n            </div>\n          </div>\n          {this.isLoading && <td class=\"text-gray-500\">&nbsp;</td>}\n        </div>\n      </div>\n    );\n  }\n}\n"]}