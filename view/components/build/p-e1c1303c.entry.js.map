{"version":3,"sources":["src/components/userProfilePage/last-logs/last-logs.tsx"],"names":["LastLogs","[object Object]","hostRef","this","isLoading","isLoadingError","total","tableData","response","axios","get","url","user","data","respond","map","item","isCustomQuery","error","console","log","fetchData","columns","Object","keys","op","result","replace","finalResult","charAt","toUpperCase","slice","id","name","key","type","isSortable","isEditable","isFilterable","isDeletable","suffix","maxChar","customStyle","headerStyle","textTransform","headerClass","cellClass","filter","includes","push","customRowComponent","value","h","target","href","class","src","alt","dataRow","row","forEach","column","columnKey","Date","Host","length","showActions","maxHeight"],"mappings":"qFAuCaA,EAAQ,MAJrBC,YAAAC,aAOWC,KAAAC,UAAY,MACZD,KAAAE,eAAiB,MACjBF,KAAAG,MAAa,KACbH,KAAAI,UAAuB,GAEhCN,kBACEE,KAAKC,UAAY,KACjBD,KAAKE,eAAiB,MACtB,IACE,MAAMG,QAAiBC,EAAMC,IAAI,GAAGP,KAAKQ,2DAA2DR,KAAKS,mBACzGJ,EAASK,KAAKC,QAAQC,KAAIC,IACxBA,EAAKC,gBAAkB,KAAQD,EAAK,iBAAmB,eAAmBA,EAAK,iBAAmB,mBAEpGb,KAAKG,MAAQE,EAASK,KAAKP,MAC3BH,KAAKG,MAAQE,EAASK,KAAKP,MAC3BH,KAAKI,UAAYC,EAASK,KAAKC,QAC/BX,KAAKC,UAAY,MACjB,MAAOc,GACPC,QAAQC,IAAI,QAASF,IAIzBjB,oBACEE,KAAKkB,YAGPpB,SACE,IAAIqB,EAAqBC,OAAOC,KAAKrB,KAAKI,UAAU,IAAM,IAAIQ,KAAIU,IAChE,MAAMC,EAASD,EAAGE,QAAQ,WAAY,OACtC,MAAMC,EAAcF,EAAOG,OAAO,GAAGC,cAAgBJ,EAAOK,MAAM,GAClE,MAAO,CACLC,GAAIP,EACJQ,KAAMR,IAAO,gBAAkB,aAAeG,EAC9CM,IAAKT,EACLU,KAAMV,IAAO,kBAAoB,WAAa,SAE9CW,WAAY,MACZC,WAAY,MACZC,aAAc,MACdC,YAAa,MAEbC,OAAQf,IAAO,YAAc,MAAQ,GACrCgB,QAAS,GAETC,YAAa,CACXC,YAAa,CACXC,cAAe,aAEjBC,YAAa,YACbC,UAAW,iBAKjBxB,EAAUA,EAAQyB,QAAO/B,IAAS,CAAC,UAAW,QAAS,cAAe,cAAe,MAAMgC,SAAShC,EAAKkB,OAEzGZ,EAAQ2B,KAAK,CACXjB,GAAI,cACJC,KAAM,WACNC,IAAK,cACLC,KAAM,SAENC,WAAY,MACZC,WAAY,MACZC,aAAc,MACdC,YAAa,MAEbW,mBAAoBC,GAEhBC,EAAA,IAAA,CAAGC,OAAO,SAASC,KAAM,sBAAwBH,EAAOI,MAAM,+FAC5DH,EAAA,MAAA,CAAKG,MAAM,MAAMC,IAAK,sCAAuCC,IAAI,SACjEL,EAAA,OAAA,CAAMG,MAAM,SAAO,SAIzBb,YAAa,CACXC,YAAa,CACXC,cAAe,aAEjBC,YAAa,eAIjB,MAAMhC,EAAOV,KAAKI,UAAUQ,KAAI2C,IAC9B,MAAMC,EAAM,GAEZrC,EAAQsC,SAAQC,IACd,MAAMC,EAAYD,EAAO3B,IACzB,OAAQ4B,GACN,IAAK,kBACHH,EAAIG,GAAa,IAAIC,KAAKL,EAAQI,IAClC,MACF,QACEH,EAAIG,GAAaJ,EAAQI,GACzB,UAIN,OAAOH,KAET,OACEP,EAACY,EAAI,CAACT,MAAM,8BACT1C,EAAKoD,OAAS,EACbb,EAAA,aAAA,CAAYc,YAAa,MAAO5C,QAASA,EAAST,KAAMA,EAAM6B,YAAa,CAAEyB,UAAW,WAExFf,EAAA,KAAA,CAAIG,MAAM,mEAAiE","sourcesContent":["import { Component, Prop, Host, h, State } from '@stencil/core';\nimport axios from 'axios';\n\ntype IColumn = {\n  id: number | string;\n  key: string;\n  name: string;\n  type: 'number' | 'string' | 'date' | 'datetime';\n\n  prefix?: string;\n  suffix?: string;\n  maxChar?: number;\n  decimal?: boolean;\n  decimalPlaces?: number;\n  seperator?: string;\n\n  isSortable: boolean;\n  isFilterable: boolean;\n  isEditable: boolean;\n  isDeletable: boolean;\n\n  onSort?: (key: string) => Promise<void>;\n  onFilter?: (key: string) => Promise<void>;\n  onRowClick?: (id: string | number, key: string, value: any) => Promise<void>;\n  customColumnComponent?: (name: string) => any;\n  customRowComponent?: (value: any) => any;\n\n  customStyle?: {\n    headerStyle?: { [index: string]: string | number };\n    headerClass?: string;\n    cellStyle?: { [index: string]: string | number };\n    cellClass?: string;\n  };\n};\n\n@Component({\n  tag: 'last-logs',\n  scoped: true,\n})\nexport class LastLogs {\n  @Prop() url: string;\n  @Prop() user: string;\n  @State() isLoading = false;\n  @State() isLoadingError = false;\n  @State() total: any = null;\n  @State() tableData: Array<{}> = [];\n\n  async fetchData() {\n    this.isLoading = true;\n    this.isLoadingError = false;\n    try {\n      const response = await axios.get(`${this.url}api/editor/query/logs?limit=49&offset=0&filter_email=${this.user}&order=desc`);\n      response.data.respond.map(item => {\n        item.isCustomQuery === true ? (item['isCustomQuery'] = 'Custom Query') : (item['isCustomQuery'] = 'Builder Query');\n      });\n      this.total = response.data.total;\n      this.total = response.data.total;\n      this.tableData = response.data.respond;\n      this.isLoading = false;\n    } catch (error) {\n      console.log('error', error);\n    }\n  }\n\n  componentWillLoad() {\n    this.fetchData();\n  }\n\n  render() {\n    let columns: IColumn[] = Object.keys(this.tableData[0] || {}).map(op => {\n      const result = op.replace(/([A-Z])/g, ' $1');\n      const finalResult = result.charAt(0).toUpperCase() + result.slice(1);\n      return {\n        id: op,\n        name: op === 'isCustomQuery' ? 'Query Type' : finalResult,\n        key: op,\n        type: op === 'timeOfExecution' ? 'datetime' : 'string',\n\n        isSortable: false,\n        isEditable: false,\n        isFilterable: false,\n        isDeletable: false,\n\n        suffix: op === 'timeTaken' ? ' ms' : '',\n        maxChar: 50,\n\n        customStyle: {\n          headerStyle: {\n            textTransform: 'uppercase',\n          },\n          headerClass: 'px-6 py-4',\n          cellClass: 'px-6 py-4',\n        },\n      };\n    });\n\n    columns = columns.filter(item => !['ownerId', 'email', 'queryResult', 'queryStatus', 'id'].includes(item.key));\n\n    columns.push({\n      id: 'queryResult',\n      name: 'Log File',\n      key: 'queryResult',\n      type: 'string',\n\n      isSortable: false,\n      isEditable: false,\n      isFilterable: false,\n      isDeletable: false,\n\n      customRowComponent: value => {\n        return (\n          <a target=\"_blank\" href={'/editor/query/logs/' + value} class=\"mx-4 flex items-center py-1 px-4 text-base font-normal text-gray-900 rounded-lg bg-gray-200\">\n            <img class=\"h-4\" src={'https://i.stack.imgur.com/To3El.png'} alt=\"icon\" />\n            <span class=\"px-2 \">View</span>\n          </a>\n        );\n      },\n      customStyle: {\n        headerStyle: {\n          textTransform: 'uppercase',\n        },\n        headerClass: 'px-6 py-4',\n      },\n    });\n\n    const data = this.tableData.map(dataRow => {\n      const row = {};\n\n      columns.forEach(column => {\n        const columnKey = column.key;\n        switch (columnKey) {\n          case 'timeOfExecution':\n            row[columnKey] = new Date(dataRow[columnKey]);\n            break;\n          default:\n            row[columnKey] = dataRow[columnKey];\n            break;\n        }\n      });\n\n      return row;\n    });\n    return (\n      <Host class=\"border-b-2 border-gray-200\">\n        {data.length > 0 ? (\n          <data-table showActions={false} columns={columns} data={data} customStyle={{ maxHeight: '16rem' }}></data-table>\n        ) : (\n          <h2 class=\"font-mono text-lg text-center font-bold leading-7 text-gray-400\">No Log Data Available</h2>\n        )}\n      </Host>\n    );\n  }\n}\n"]}