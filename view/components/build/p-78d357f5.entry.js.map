{"version":3,"sources":["src/components/common/basic-dropdown/basic-dropdown.css?tag=basic-dropdown&encapsulation=scoped","src/components/common/basic-dropdown/basic-dropdown.tsx","src/components/common/custom-drop-down/custom-drop-down.css?tag=custom-drop-down&encapsulation=scoped","src/components/common/custom-drop-down/custom-drop-down.tsx","src/components/editorPage/insert-node-modal/insert-node-modal.css?tag=insert-node-modal&encapsulation=scoped","src/components/editorPage/insert-node-modal/insert-node-modal.tsx","src/components/editorPage/save-query-modal/save-query-modal.css?tag=save-query-modal&encapsulation=scoped","src/components/editorPage/save-query-modal/save-query-modal.tsx"],"names":["basicDropdownCss","visibilityClasses","true","false","BasicDropdown","[object Object]","hostRef","this","label","toggle","selectedOption","newValue","oldValue","options","map","option","selected","propSelectedOptionLabel","optionHandler","propOptions","selectedLabel","toggleDropDown","h","Host","onClick","id","data-dropdown-toggle","class","type","aria-hidden","fill","stroke","viewBox","xmlns","stroke-linecap","stroke-linejoin","stroke-width","d","toString","aria-labelledby","selectHandler","href","customDropDownCss","CustomDropDown","optionListProp","isDropDownOpen","optionList","dropdownSearchKey","dropDownValue","e","target","value","matchedOptionList","toLowerCase","search","filter","item","undefined","dropDownHandler","data-dropdown-placement","style","width","htmlFor","fill-rule","clip-rule","placeholder","onInput","inputSearchHandler","handleSelect","insertNodeModalCss","InsertNodeModal","parsedPermissions","isModalOpen","downloadError","addNodeState","property","valueType","customDropDownValue","nodes","valueOptions","isFormValid","JSON","parse","permissions","state","availableNodes","node","toggleModalState","preventDefault","event","key","index","test","currentNodes","push","_","idx","isNodeEmpty","forEach","validationChecker","properties","parseFloat","queryMode","insertNodeLabel","insertProperties","selectedNodeName","refreshData","fetchNavigators","title","color","size","clickHandler","icon","onSubmit","submitHandler","handleCustomSelect","nodeMapper","_node","required","name","handleChange","disabled","length","removeNodeHandler","onAddNode","handleSubmit","hasAccess","permission","discardAddNode","saveQueryModalCss","SaveQueryModal","editModalTabActiveIndex","query","parameters","handleTableIndex","deleteQueryData","Swal","fire","position","text","showConfirmButton","timer","queryDataFetcher","err","console","log","queryParameter","queryData","parameter","transactionToAddQuery","viewQuery","update","changes","from","to","doc","insert","dispatch","transactionToAddParameter","viewParameter","navigator","clipboard","writeText","getPreviewData","dataLoader","display","queryHistory","alignItems","copyDataHandler","deleteQueryHandler","startIcon","varient","customClass","cancelEdit"],"mappings":"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","sourcesContent":[":host {\n  display: block;\n}\n","import { Component, Host, h, Prop, State, Watch } from '@stencil/core';\n\nconst visibilityClasses = {\n  true: '',\n  false: 'hidden',\n};\n\n@Component({\n  tag: 'basic-dropdown',\n  styleUrl: 'basic-dropdown.css',\n  scoped: true,\n})\nexport class BasicDropdown {\n  @Prop() propOptions: any;\n  @Prop() propSelectedOptionLabel: string;\n  @Prop() label: string = 'DropDown';\n  @Prop() optionHandler: any;\n  @State() options: any;\n  @State() toggle: boolean = false;\n  @State() selectedOption: string = '';\n  @Watch('propSelectedOptionLabel')\n  validateName(newValue: string, oldValue: string) {\n    if (newValue !== oldValue) {\n      this.options = [...this.options].map(option => {\n        if (option.label === newValue) {\n          return {\n            label: newValue,\n            selected: true,\n          };\n        }\n        return {\n          label: option.label,\n          selected: false,\n        };\n      });\n      this.selectedOption = this.propSelectedOptionLabel;\n      this.optionHandler(this.selectedOption);\n    }\n  }\n\n  componentWillLoad() {\n    this.selectedOption = this.propSelectedOptionLabel;\n    this.options = this.propOptions;\n  }\n\n  toggleDropDown() {\n    this.toggle = !this.toggle;\n  }\n\n  selectHandler(selectedLabel) {\n    this.selectedOption = selectedLabel;\n    this.options = [...this.options].map(option => {\n      if (option.label === selectedLabel) {\n        return {\n          label: selectedLabel,\n          selected: true,\n        };\n      }\n      return {\n        label: option.label,\n        selected: false,\n      };\n    });\n    this.optionHandler(selectedLabel);\n    this.toggleDropDown();\n  }\n\n  render() {\n    return (\n      <Host>\n        <button\n          onClick={() => this.toggleDropDown()}\n          id=\"dropdownDefaultButton\"\n          data-dropdown-toggle=\"dropdown\"\n          class=\"justify-between bg-gray-100 border border-gray-200 focus:ring-1 focus:outline-none focus:ring-gray-500 font-medium rounded-lg text-sm px-2 py-2 text-center inline-flex items-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 w-full\"\n          type=\"button\"\n        >\n          {this.label} {this.selectedOption}{' '}\n          <svg class=\"w-4 h-4 ml-2\" aria-hidden=\"true\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path>\n          </svg>\n        </button>\n        <div id=\"dropdown\" class={`absolute my-2 z-10 bg-white divide-y divide-gray-100 rounded-lg shadow w-40 dark:bg-gray-700 ${visibilityClasses[this.toggle.toString()]}`}>\n          <ul class=\"py-2 text-sm text-gray-700 dark:text-gray-200\" aria-labelledby=\"dropdownDefaultButton\">\n            {this.options.map(option => {\n              return (\n                <li onClick={() => this.selectHandler(option.label)}>\n                  <a href=\"#\" class=\"block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white\">\n                    {option.label}\n                  </a>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </Host>\n    );\n  }\n}\n",":host {\n  display: block;\n}\n","import { Component, Host, h, Prop, State } from '@stencil/core';\n\nconst visibilityClasses = {\n  true: '',\n  false: 'hidden',\n};\n\n@Component({\n  tag: 'custom-drop-down',\n  styleUrl: 'custom-drop-down.css',\n  scoped: true,\n})\nexport class CustomDropDown {\n  @Prop() optionListProp = [\n    { label: 'Durga', selected: false },\n    { label: 'Phukan', selected: false },\n  ];\n  @Prop() dropDownValue: string;\n  @Prop() selectHandler: any;\n  @State() isDropDownOpen: boolean = false;\n  @State() optionList = [];\n  @State() dropdownSearchKey: string = '';\n\n  componentWillLoad() {\n    this.dropdownSearchKey = this.dropDownValue;\n    this.optionList = [...this.optionListProp];\n  }\n\n  dropDownHandler() {\n    this.isDropDownOpen = !this.isDropDownOpen;\n  }\n  inputSearchHandler(e) {\n    this.dropdownSearchKey = e.target.value;\n    const matchedOptionList = this.optionListProp.map(option => {\n      if (option.label.toLowerCase().search(e.target.value.toLowerCase()) !== -1) {\n        return option;\n      }\n    });\n    this.optionList = matchedOptionList.filter(item => item !== undefined);\n  }\n  handleSelect() {\n    this.selectHandler(this.dropdownSearchKey);\n\n    this.dropDownHandler();\n  }\n\n  render() {\n    return (\n      <Host>\n        <button\n          onClick={() => this.dropDownHandler()}\n          id=\"dropdownSearchButton\"\n          data-dropdown-toggle=\"dropdownSearch\"\n          data-dropdown-placement=\"bottom\"\n          class=\"justify-between bg-gray-100 border border-gray-200 focus:ring-1 focus:outline-none focus:ring-gray-500 font-medium rounded-lg text-sm px-4 py-2.5 text-center inline-flex items-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 w-full\"\n          type=\"button\"\n        >\n          {`Selected Node: ${this.dropdownSearchKey || ''}`}\n          <svg class=\"w-4 h-4 ml-2\" aria-hidden=\"true\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path>\n          </svg>\n        </button>\n\n        <form style={{ width: '93%' }} id=\"dropdownSearch\" class={`absolute my-2 bg-white rounded-lg shadow dark:bg-gray-700 ${visibilityClasses[this.isDropDownOpen.toString()]}`}>\n          <div class=\"p-3\">\n            <label htmlFor=\"input-group-search\" class=\"sr-only\">\n              Search\n            </label>\n            <div class=\"relative\">\n              <div class=\"absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none\">\n                <svg class=\"w-5 h-5 text-gray-500 dark:text-gray-400\" aria-hidden=\"true\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\"\n                    clip-rule=\"evenodd\"\n                  ></path>\n                </svg>\n              </div>\n              <input\n                type=\"text\"\n                id=\"input-group-search\"\n                class=\"block w-full p-2 pl-10 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\"\n                placeholder=\"Search\"\n                onInput={e => this.inputSearchHandler(e)}\n                value={this.dropdownSearchKey}\n              />\n            </div>\n          </div>\n          <ul class=\"h-28 px-3 pb-3 overflow-y-auto text-sm text-gray-700 dark:text-gray-200\" aria-labelledby=\"dropdownSearchButton\">\n            {this.optionList.map(option => {\n              return (\n                <li>\n                  <div class=\"flex items-center pl-2 rounded hover:bg-gray-100 dark:hover:bg-gray-600\">\n                    <label\n                      onClick={() => {\n                        this.dropdownSearchKey = option.label;\n                        this.handleSelect();\n                      }}\n                      htmlFor=\"checkbox-item-11\"\n                      class=\"w-full py-2 ml-2 text-sm font-medium text-gray-900 rounded dark:text-gray-300\"\n                    >\n                      {option.label}\n                    </label>\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n          <button\n            type=\"button\"\n            onClick={() => this.handleSelect()}\n            class=\"flex w-full items-center p-3 text-sm font-medium text-gray-700 border-t border-gray-400 rounded-b-lg bg-gray-100 dark:border-gray-600 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-red-500 \"\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-6 h-6\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M12 9v6m3-3H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n            <span class=\"px-3\">Select</span>\n          </button>\n        </form>\n      </Host>\n    );\n  }\n}\n",":host {\n  display: block;\n}\n","import { Component, Host, h, State, Prop } from '@stencil/core';\nimport state from '../store';\nimport { hasAccess } from '../../../utils/utils';\n\n@Component({\n  tag: 'insert-node-modal',\n  styleUrl: 'insert-node-modal.css',\n  scoped: true,\n})\nexport class InsertNodeModal {\n  @Prop() fetchNavigators: Function;\n  @Prop() permissions: string;\n\n  @State() parsedPermissions: [] = [];\n  @State() value: string;\n  @State() isModalOpen = false;\n\n  @State() downloadError = null;\n  @State() addNodeState = [{ property: '', value: '', valueType: '' }];\n  @State() customDropDownValue: string = '';\n  @State() nodes: [{ label: string; selected: boolean }] = [{ label: '', selected: false }];\n  @State() valueOptions = [\n    { label: 'String', selected: true },\n    { label: 'Number', selected: false },\n  ];\n  @State() propSelectedOptionLabel: string = 'String';\n  @State() isFormValid: boolean = true;\n\n  componentWillLoad() {\n    this.parsedPermissions = JSON.parse(this.permissions || '[]');\n  }\n\n  nodeMapper() {\n    const nodes = state.availableNodes.map(node => {\n      return {\n        label: node,\n        selected: false,\n      };\n    });\n    return nodes;\n  }\n\n  toggleModalState() {\n    this.isModalOpen = !this.isModalOpen;\n  }\n\n  discardAddNode() {\n    this.isFormValid = true;\n    this.toggleModalState();\n    this.addNodeState = [{ property: '', value: '', valueType: '' }];\n  }\n\n  async submitHandler(e) {\n    e.preventDefault();\n  }\n\n  handleChange(event, key, index) {\n    if (key === 'value') {\n      this.propSelectedOptionLabel = /^-?\\d+\\.?\\d*$/.test(event.target.value) ? 'Number' : 'String';\n    }\n    this.addNodeState[index][key] = event.target.value;\n  }\n  onAddNode() {\n    const currentNodes = [...this.addNodeState];\n    let node = {\n      property: '',\n      value: '',\n      valueType: '',\n    };\n    currentNodes.push(node);\n    this.addNodeState = currentNodes;\n  }\n  removeNodeHandler(index) {\n    this.addNodeState = [...this.addNodeState].filter((_, idx) => idx !== index);\n  }\n  handleCustomSelect(value) {\n    this.customDropDownValue = value;\n  }\n  optionHandler(index, selectedLabel) {\n    this.addNodeState[index]['valueType'] = selectedLabel;\n  }\n  validationChecker() {\n    let isNodeEmpty = false;\n    this.addNodeState.forEach(node => {\n      if (node.property === '' || node.value === '') isNodeEmpty = true;\n    });\n\n    if (this.customDropDownValue === '' || isNodeEmpty) {\n      this.isFormValid = false;\n      return false;\n    }\n    this.isFormValid = true;\n    return true;\n  }\n\n  async handleSubmit() {\n    if (this.validationChecker()) {\n      const properties: { [key: string]: string | number } = {};\n      this.addNodeState.forEach(node => {\n        switch (node.valueType) {\n          case 'String':\n            properties[node.property] = node.value;\n            break;\n          case 'Number':\n            properties[node.property] = parseFloat(node.value);\n            break;\n          default:\n            properties[node.property] = node.value;\n            break;\n        }\n      });\n\n      state.queryMode = 'insert';\n      state.insertNodeLabel = this.customDropDownValue;\n      state.insertProperties = properties;\n      state.selectedNodeName = state.insertNodeLabel;\n      this.customDropDownValue = '';\n      await state.refreshData();\n      this.toggleModalState();\n      this.addNodeState = [{ property: '', value: '', valueType: '' }];\n      await this.fetchNavigators();\n    }\n  }\n\n  render() {\n    return (\n      <Host>\n        {/* Modal Button */}\n        <icon-button-basic\n          title=\"Add Node\"\n          color=\"secondary\"\n          size=\"md\"\n          clickHandler={() => this.toggleModalState()}\n          icon={\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-7 h-7\">\n              <path\n                stroke-linecap=\"round\"\n                stroke-linejoin=\"round\"\n                d=\"M13.5 16.875h3.375m0 0h3.375m-3.375 0V13.5m0 3.375v3.375M6 10.5h2.25a2.25 2.25 0 002.25-2.25V6a2.25 2.25 0 00-2.25-2.25H6A2.25 2.25 0 003.75 6v2.25A2.25 2.25 0 006 10.5zm0 9.75h2.25A2.25 2.25 0 0010.5 18v-2.25a2.25 2.25 0 00-2.25-2.25H6a2.25 2.25 0 00-2.25 2.25V18A2.25 2.25 0 006 20.25zm9.75-9.75H18a2.25 2.25 0 002.25-2.25V6A2.25 2.25 0 0018 3.75h-2.25A2.25 2.25 0 0013.5 6v2.25a2.25 2.25 0 002.25 2.25z\"\n              />\n            </svg>\n          }\n        />\n\n        {/* Main Modal */}\n        {this.isModalOpen && (\n          <form onSubmit={e => this.submitHandler(e)} class=\" space-y-3\">\n            <div class=\"fixed z-10 inset-0 overflow-y-auto\">\n              <div class=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n                <div class=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\"></div>\n\n                {/* <!-- This element is to trick the browser into centering the modal contents. --> */}\n                <span class=\"hidden sm:inline-block sm:align-middle sm:h-screen\">&#8203;</span>\n\n                <div class=\"relative inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-2xl sm:w-full\">\n                  <div class=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\n                    <div>\n                      <div class=\"mt-3 text-center sm:mt-0 sm:text-left\">\n                        <div class=\"flex justify-between\">\n                          <h3 class=\"text-lg leading-6 font-semibold text-gray-600 my-2 pb-3\" id=\"modal-title\">\n                            Add Node\n                          </h3>\n                        </div>\n                        <custom-drop-down class=\"py-4\" selectHandler={value => this.handleCustomSelect(value)} optionListProp={this.nodeMapper()}></custom-drop-down>\n                        <div class=\"max-h-60 overflow-auto custom-scrollbar\">\n                          {this.addNodeState.map((_node, index) => {\n                            return (\n                              <div class=\"mt-2 flex gap-4\">\n                                <div>\n                                  <label class=\"block pb-2 font-medium text-gray-600\" htmlFor=\"searchText\">\n                                    Property\n                                  </label>\n                                  <input\n                                    type=\"text\"\n                                    required\n                                    name={`property_${index}`}\n                                    placeholder=\"Enter file name\"\n                                    class=\"mb-2 border active:border-2 outline-none px-2 py-2 rounded-md text-sm w-full\"\n                                    value={this.addNodeState[index]['property']}\n                                    onInput={event => this.handleChange(event, 'property', index)}\n                                  />\n                                </div>\n                                <div>\n                                  <label class=\"block pb-2 font-medium text-gray-600\" htmlFor=\"searchText\">\n                                    Value\n                                  </label>\n                                  <input\n                                    type=\"text\"\n                                    name={`value_${index}`}\n                                    required\n                                    placeholder=\"Enter file name\"\n                                    class=\"mb-2 border active:border-2 outline-none px-2 p-2 rounded-md text-sm w-full\"\n                                    value={this.addNodeState[index]['value']}\n                                    onInput={event => this.handleChange(event, 'value', index)}\n                                  />\n                                </div>\n                                <div class=\"w-56 h-5 align-middle\">\n                                  <label class=\"block pb-2 font-medium text-gray-600\" htmlFor=\"valueType\">\n                                    Value Type\n                                  </label>\n                                  <basic-dropdown\n                                    label=\"Select:\"\n                                    propOptions={this.valueOptions}\n                                    propSelectedOptionLabel={this.propSelectedOptionLabel}\n                                    optionHandler={selectedLabel => this.optionHandler(index, selectedLabel)}\n                                    class=\"w-40\"\n                                    id=\"valueType\"\n                                  ></basic-dropdown>\n                                </div>\n                                <div class=\"align-middle\">\n                                  <label class=\"block pb-2 font-medium text-gray-600\" htmlFor=\"valueType\">\n                                    <span class=\"mb-4\">Remove</span>\n                                  </label>\n                                  <button\n                                    disabled={this.addNodeState.length <= 1}\n                                    type=\"button\"\n                                    onClick={() => this.removeNodeHandler(index)}\n                                    class=\"mt-1 mx-3 disabled:text-gray-200\"\n                                  >\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-8 h-8\">\n                                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M15 12H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                                    </svg>\n                                  </button>\n                                </div>\n                              </div>\n                            );\n                          })}\n                        </div>\n                        <div\n                          onClick={() => this.onAddNode()}\n                          class=\"flex gap-4 justify-center align-middle border bg-gray-100 border-gray-200 rounded-md my-6 p-2 cursor-pointer hover:bg-gray-200 hover:border-gray-300\"\n                        >\n                          <div>\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.2\" stroke=\"currentColor\" class=\"w-8 h-8 \">\n                              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M12 9v6m3-3H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                            </svg>\n                          </div>\n                          <span class=\"pt-1\">Add Node</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\n                    <button\n                      type=\"submit\"\n                      onClick={() => this.handleSubmit()}\n                      disabled={!hasAccess(this.parsedPermissions, { name: 'editor', permission: 'update' })}\n                      class=\"w-full gap-2 inline-flex justify-center rounded-md border-transparent shadow-sm px-4 py-2 border border-gray-300 bg-gray-600 text-base font-medium text-white disabled:bg-gray-200 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 sm:ml-3 sm:w-auto sm:text-sm\"\n                    >\n                      {\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-5 h-5\">\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M12 9v6m3-3H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                        </svg>\n                      }\n                      <span class=\"text-md font-semibold\">Add</span>\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => this.discardAddNode()}\n                      class=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\"\n                    >\n                      Cancel\n                    </button>\n                    <div class=\"mt-2\">\n                      {!this.isFormValid && <span class=\" rounded-lg px-20 py-2 border border-red-300 bg-gray-100 text-red-500\">Please fill up all the required fields</span>}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </form>\n        )}\n      </Host>\n    );\n  }\n}\n",":host {\n  display: block;\n}\n","import { Component, Host, h, State, Prop } from '@stencil/core';\nimport Swal from 'sweetalert2';\nimport state from '../store';\n\n@Component({\n  tag: 'save-query-modal',\n  styleUrl: 'save-query-modal.css',\n  scoped: true,\n})\nexport class SaveQueryModal {\n  @State() value: string;\n  @State() isModalOpen = false;\n\n  @State() editModalTabActiveIndex: number = 0;\n  @State() query: string = '';\n  @State() parameters: string = '{}';\n  @Prop() queryDataFetcher: () => void;\n  @Prop() deleteQueryData: (deleteId: number) => void;\n\n  handleTableIndex = index => {\n    this.editModalTabActiveIndex = index;\n  };\n\n  submitHandler(e) {\n    e.preventDefault();\n    // state.refreshData();\n  }\n  async deleteQueryHandler(id: number) {\n    try {\n      this.deleteQueryData(id);\n      Swal.fire({\n        position: 'center',\n        icon: 'success',\n        text: 'Query deleted successfully!',\n        showConfirmButton: false,\n        timer: 1500,\n      });\n      await this.queryDataFetcher();\n    } catch (err) {\n      Swal.fire({\n        icon: 'error',\n        title: 'Query could not be deleted',\n        text: err,\n      });\n      console.log(err);\n    }\n  }\n\n  async getPreviewData() {\n    this.query = state.query;\n    this.parameters = state.queryParameter;\n  }\n  copyDataHandler(queryData) {\n    state.query = queryData.query;\n    state.queryParameter = queryData.parameter;\n    let transactionToAddQuery = state.viewQuery.state.update({\n      changes: { from: 0, to: state.viewQuery.state.doc.toString().length, insert: state.query },\n    });\n    state.viewQuery.dispatch(transactionToAddQuery);\n\n    let transactionToAddParameter = state.viewParameter.state.update({\n      changes: { from: 0, to: state.viewParameter.state.doc.toString().length, insert: state.queryParameter },\n    });\n    state.viewParameter.dispatch(transactionToAddParameter);\n    Swal.fire({\n      position: 'center',\n      icon: 'success',\n      text: 'Query copied to editor successfully!',\n      showConfirmButton: false,\n      timer: 1500,\n    });\n    this.toggleModalState();\n  }\n\n  copyToClipboard() {\n    state.queryMode = 'read';\n    navigator.clipboard.writeText(`${this.query}\n\n// please move the parameters to the parameters section\n${this.parameters}`);\n\n    this.toggleModalState();\n    Swal.fire({\n      position: 'center',\n      icon: 'success',\n      text: 'Query copied!',\n      showConfirmButton: false,\n      timer: 1500,\n    });\n  }\n  cancelEdit() {\n    state.queryMode = 'read';\n    this.toggleModalState();\n  }\n\n  toggleModalState() {\n    this.getPreviewData();\n    this.isModalOpen = !this.isModalOpen;\n  }\n  async dataLoader() {\n    this.toggleModalState();\n    await this.queryDataFetcher();\n  }\n\n  render() {\n    return (\n      <Host>\n        {/* Modal Button */}\n        <icon-button-basic\n          title=\"Saved Query\"\n          color=\"secondary\"\n          size=\"md\"\n          clickHandler={() => this.dataLoader()}\n          icon={\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-6 h-6\">\n              <path\n                stroke-linecap=\"round\"\n                stroke-linejoin=\"round\"\n                d=\"M17.593 3.322c1.1.128 1.907 1.077 1.907 2.185V21L12 17.25 4.5 21V5.507c0-1.108.806-2.057 1.907-2.185a48.507 48.507 0 0111.186 0z\"\n              />\n            </svg>\n          }\n        />\n\n        {/* Main Modal */}\n        {this.isModalOpen && (\n          <form style={{ display: 'contents' }} class=\"pt-6 space-y-3\">\n            <div class=\"fixed z-30 inset-0 overflow-y-auto\">\n              <div class=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n                <div class=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\"></div>\n\n                {/* <!-- This element is to trick the browser into centering the modal contents. --> */}\n                <span class=\"hidden sm:inline-block sm:align-middle sm:h-screen\">&#8203;</span>\n\n                <div class=\"relative inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-7xl sm:w-full\">\n                  <h3 class=\"pt-3 px-4 font-semibold text-lg text-gray-400\">Saved Query</h3>\n                  {state.queryHistory.length > 0 ? (\n                    <div class=\"px-8\">\n                      <div class=\"flex gap-4 py-2 mb-2 px-4 rounded-lg\">\n                        <pre class=\"text-lg font-semibold rounded-lg w-1/4 text-center text-indigo-500\">Title</pre>\n                        <pre class=\"text-lg font-semibold rounded-lg w-5/12 text-center  text-indigo-500\">Query</pre>\n                        <pre class=\"text-lg font-semibold rounded-lg w-2/6 text-center  text-indigo-500\">Parameter</pre>\n                      </div>\n                      <div class=\"custom-scrollbar overflow-auto w-full h-96 px-8 mt-3\">\n                        {state.queryHistory.map((queryData: any) => {\n                          return (\n                            <div class=\"flex px-2 justify-between\">\n                              <div style={{ alignItems: 'center' }} class=\"flex gap-4 my-2 mb-2 rounded-lg mr-4 w-full\">\n                                <div onClick={() => this.copyDataHandler(queryData)} style={{ width: '300px' }} class=\"px-4 bg-slate-200 rounded-lg overflow-hidden cursor-pointer\">\n                                  <nobr style={{ alignItems: 'center' }} title={queryData.title} class=\"mx-auto h-8 flex w-11/12 overflow-hidden overflow-ellipsis\">\n                                    {queryData.title}\n                                  </nobr>\n                                </div>\n                                <div onClick={() => this.copyDataHandler(queryData)} style={{ width: '470px' }} class=\"bg-slate-200 rounded-lg overflow-hidden cursor-pointer\">\n                                  <nobr style={{ alignItems: 'center' }} title={queryData.query} class=\"mx-auto h-8 w-11/12 flex overflow-hidden overflow-ellipsis\">\n                                    {queryData.query}\n                                  </nobr>\n                                </div>\n                                <div onClick={() => this.copyDataHandler(queryData)} style={{ width: '360px' }} class=\" bg-gray-200  rounded-lg overflow-hidden cursor-pointer\">\n                                  <nobr style={{ alignItems: 'center' }} title={queryData.parameter} class=\"mx-auto h-8 w-11/12 flex overflow-hidden overflow-ellipsis\">\n                                    {queryData.parameter}\n                                  </nobr>\n                                </div>\n\n                                <svg\n                                  onClick={() => this.deleteQueryHandler(queryData.id)}\n                                  class=\"cursor-pointer hover:text-indigo-400 w-6 h-6\"\n                                  xmlns=\"http://www.w3.org/2000/svg\"\n                                  fill=\"none\"\n                                  viewBox=\"0 0 24 24\"\n                                  stroke-width=\"1.5\"\n                                  stroke=\"currentColor\"\n                                >\n                                  <path\n                                    stroke-linecap=\"round\"\n                                    stroke-linejoin=\"round\"\n                                    d=\"M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0\"\n                                  />\n                                </svg>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  ) : (\n                    <h3 class=\"mx-4 text-indigo-400 text-center text-lg font-semibold\">No Saved Query Found !!!</h3>\n                  )}\n\n                  <div class=\"bg-gray-50 px-4 py-4 sm:px-6 sm:flex sm:flex-row-reverse gap-4\">\n                    <icon-label-submit-button\n                      startIcon={\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-5 h-5\">\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                        </svg>\n                      }\n                      title=\"Cancel\"\n                      varient=\"outlined\"\n                      customClass=\"mr-6\"\n                      clickHandler={() => this.cancelEdit()}\n                    >\n                      Cancel\n                    </icon-label-submit-button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </form>\n        )}\n      </Host>\n    );\n  }\n}\n"]}