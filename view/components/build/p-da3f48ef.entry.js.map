{"version":3,"sources":["src/components/common/data-table-updated/data-table-updated.tsx"],"names":["DataTableUpdated","[object Object]","hostRef","this","toggleSort","currentPage","dataPerPage","isObject","doc","every","item","body","currentBody","map","index","header","Object","keys","title","sortIcon","h","class","sortDirection","event","value","target","searchedValues","filter","items","values","some","toString","toLowerCase","indexOf","direction","sortedData","sortDir","icon","objIndex","findIndex","obj","sort","a","b","indexOfLastPost","indexOfFirstPost","currentData","slice","totalPage","length","Host","htmlFor","fill","viewBox","xmlns","fill-rule","d","clip-rule","type","id","placeholder","onInput","e","handleChange","scope","onClick","sortData","row","_a","colSpan","color","disabledHandler","clickHandler","previousPage","addClass","nextPage"],"mappings":"sDAMaA,EAAgB,MAJ7BC,YAAAC,aAUWC,KAAAC,WAAa,MACbD,KAAAE,YAAc,EACdF,KAAAG,YAAc,GAEvBL,oBACE,IAAIM,EAAWJ,KAAKK,IAAIC,OAAMC,UAAeA,IAAS,WAEtD,GAAIH,EAAU,CACZJ,KAAKQ,KAAOR,KAAKK,IACjBL,KAAKS,YAAcT,KAAKQ,SACnB,CACLR,KAAKQ,KAAOR,KAAKK,IAAIK,KAAI,CAACH,EAAMI,KACvB,CACLA,MAAOA,EAAQ,EACfJ,KAAAA,MAGJP,KAAKS,YAAcT,KAAKQ,KAG1BR,KAAKY,OAASC,OAAOC,KAAKd,KAAKQ,KAAK,IAAIE,KAAIK,IACnC,CACLA,MAAAA,EACAC,SAAUC,EAAA,OAAA,CAAMC,MAAM,sBAAoB,KAC1CC,cAAe,WAKrBrB,aAAasB,GACXpB,KAAKqB,MAAQD,EAAME,OAAOD,MAC1B,MAAME,EAAiBvB,KAAKS,YAAYe,QAAOC,GAASZ,OAAOa,OAAOD,GAAOE,MAAMpB,GAAcA,EAAKqB,WAAWC,cAAcC,QAAQ9B,KAAKqB,MAAMQ,gBAAkB,MACpK7B,KAAKQ,KAAOe,EACZvB,KAAKE,YAAc,EAGrBJ,aACIE,KAAKE,YAGTJ,iBACIE,KAAKE,YAGTJ,SAASiB,EAAOgB,GACd,IAAIC,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAIC,EAAWnC,KAAKY,OAAOwB,WAAUC,GAAOA,EAAItB,OAASA,IAEzD,GAAIgB,IAAc,QAAUA,IAAc,OAAQ,CAChDC,EAAahC,KAAKQ,KAAK8B,MAAK,CAACC,EAAGC,IAAOD,EAAExB,GAASyB,EAAEzB,IAAU,EAAIwB,EAAExB,KAAWyB,EAAEzB,GAAS,EAAI,IAC9FkB,EAAU,MACVC,EAAOjB,EAAA,OAAA,CAAMC,MAAM,sBAAoB,KAGzC,GAAIa,IAAc,MAAO,CACvBC,EAAahC,KAAKQ,KAAK8B,MAAK,CAACE,EAAGD,IAAOA,EAAExB,GAASyB,EAAEzB,IAAU,EAAIwB,EAAExB,KAAWyB,EAAEzB,GAAS,EAAI,IAC9FkB,EAAU,OACVC,EAAOjB,EAAA,OAAA,CAAMC,MAAM,sBAAoB,KAGzClB,KAAKQ,KAAO,IAAIwB,GAChBhC,KAAKY,OAAOuB,GAAUhB,cAAgBc,EACtCjC,KAAKY,OAAOuB,GAAUnB,SAAWkB,EAGnCpC,SACE,MAAM2C,EAAkBzC,KAAKE,YAAcF,KAAKG,YAChD,MAAMuC,EAAmBD,EAAkBzC,KAAKG,YAChD,MAAMwC,EAAc3C,KAAKQ,KAAKoC,MAAMF,EAAkBD,GACtD,MAAMI,EAAY7C,KAAKQ,KAAKsC,OAAS9C,KAAKG,YAE1C,OACEc,EAAC8B,EAAI,KACH9B,EAAA,MAAA,CAAKC,MAAM,oDACTD,EAAA,MAAA,CAAKC,MAAM,OACTD,EAAA,QAAA,CAAO+B,QAAQ,eAAe9B,MAAM,WAAS,UAG7CD,EAAA,MAAA,CAAKC,MAAM,iBACTD,EAAA,MAAA,CAAKC,MAAM,wEACTD,EAAA,MAAA,CAAKC,MAAM,wBAAwB+B,KAAK,eAAeC,QAAQ,YAAYC,MAAM,8BAC/ElC,EAAA,OAAA,CAAAmC,YACY,UACVC,EAAE,mHAAkHC,YAC1G,cAIhBrC,EAAA,QAAA,CACEsC,KAAK,OACLC,GAAG,eACHtC,MAAM,wIACNuC,YAAY,mBACZpC,MAAOrB,KAAKqB,MACZqC,QAASC,GAAK3D,KAAK4D,aAAaD,OAKtC1C,EAAA,QAAA,CAAOC,MAAM,2CACXD,EAAA,QAAA,CAAOC,MAAM,8CACXD,EAAA,KAAA,KACGjB,KAAKY,OAAOF,KAAIH,GACfU,EAAA,KAAA,CAAI4C,MAAM,MAAMC,QAAS,IAAM9D,KAAK+D,SAASxD,EAAKQ,MAAOR,EAAKY,eAAgBD,MAAM,2BAA2BH,MAAM,sBAClHR,EAAKQ,MACLR,EAAKS,cAMdC,EAAA,QAAA,KACG0B,EAAYjC,KAAIsD,GACf/C,EAAA,KAAA,CAAIC,MAAM,sCACPlB,KAAKY,OAAOF,KAAIH,UAAQ,OACvBU,EAAA,KAAA,CAAIC,MAAM,cAAa+C,EAAAD,EAAIzD,EAAKQ,UAAM,MAAAkD,SAAA,EAAAA,EAAIhD,EAAA,OAAA,KAAA,aAMlDA,EAAA,QAAA,KACEA,EAAA,KAAA,KACEA,EAAA,KAAA,CAAIiD,QAAS,EAAGhD,MAAM,QACpBD,EAAA,MAAA,CAAKC,MAAM,2BACTD,EAAA,eAAA,CACEkD,MAAM,WACNC,gBAAiBpE,KAAKE,cAAgB,EACtCmE,aAAc,IAAMrE,KAAKsE,eACzBf,KAAK,OACLgB,SAAS,wDAETtD,EAAA,OAAA,KAAA,aAGFA,EAAA,eAAA,CACEkD,MAAM,WACNC,gBAAiBvB,IAAc7C,KAAKE,aAAeyC,EAAYG,OAAS9C,KAAKG,YAC7EoD,KAAK,OACLc,aAAc,IAAMrE,KAAKwE,WACzBD,SAAS,uDAAqD,QAKhEtD,EAAA,IAAA,CAAGC,MAAM,QAAM,WACLD,EAAA,SAAA,KAASyB,EAAmB,GAAW,OAAIzB,EAAA,SAAA,KAASwB,GAAyB,OAAIxB,EAAA,SAAA,KAASjB,KAAKQ,KAAKsC,QAAgB","sourcesContent":["import { Component, Host, h, State, Prop } from '@stencil/core';\n\n@Component({\n  tag: 'data-table-updated',\n  scoped: true,\n})\nexport class DataTableUpdated {\n  @Prop() doc: object[];\n  @State() header: any;\n  @State() body: object[];\n  @State() currentBody: object[];\n  @State() value: string;\n  @State() toggleSort = false;\n  @State() currentPage = 1;\n  @State() dataPerPage = 10;\n\n  componentWillLoad() {\n    let isObject = this.doc.every(item => typeof item === 'object');\n\n    if (isObject) {\n      this.body = this.doc;\n      this.currentBody = this.body;\n    } else {\n      this.body = this.doc.map((item, index) => {\n        return {\n          index: index + 1,\n          item,\n        };\n      });\n      this.currentBody = this.body;\n    }\n\n    this.header = Object.keys(this.body[0]).map(title => {\n      return {\n        title,\n        sortIcon: <span class=\"pl-1 text-gray-500\">&#8645;</span>,\n        sortDirection: 'none',\n      };\n    });\n  }\n\n  handleChange(event) {\n    this.value = event.target.value;\n    const searchedValues = this.currentBody.filter(items => Object.values(items).some((item: any) => item.toString().toLowerCase().indexOf(this.value.toLowerCase()) > -1));\n    this.body = searchedValues;\n    this.currentPage = 1;\n  }\n\n  nextPage() {\n    ++this.currentPage;\n  }\n\n  previousPage() {\n    --this.currentPage;\n  }\n\n  sortData(title, direction) {\n    let sortedData: object[];\n    let sortDir: string;\n    let icon: string;\n    let objIndex = this.header.findIndex(obj => obj.title == title);\n\n    if (direction === 'none' || direction === 'desc') {\n      sortedData = this.body.sort((a, b) => (a[title] > b[title] ? -1 : a[title] === b[title] ? 0 : 1));\n      sortDir = 'asc';\n      icon = <span class=\"pl-1 text-gray-500\">&#8595;</span>;\n    }\n\n    if (direction === 'asc') {\n      sortedData = this.body.sort((b, a) => (a[title] > b[title] ? -1 : a[title] === b[title] ? 0 : 1));\n      sortDir = 'desc';\n      icon = <span class=\"pl-1 text-gray-500\">&#8593;</span>;\n    }\n\n    this.body = [...sortedData];\n    this.header[objIndex].sortDirection = sortDir;\n    this.header[objIndex].sortIcon = icon;\n  }\n\n  render() {\n    const indexOfLastPost = this.currentPage * this.dataPerPage;\n    const indexOfFirstPost = indexOfLastPost - this.dataPerPage;\n    const currentData = this.body.slice(indexOfFirstPost, indexOfLastPost);\n    const totalPage = this.body.length / this.dataPerPage;\n\n    return (\n      <Host>\n        <div class=\"relative overflow-x-auto shadow-md sm:rounded-lg\">\n          <div class=\"p-4\">\n            <label htmlFor=\"table-search\" class=\"sr-only\">\n              Search\n            </label>\n            <div class=\"relative mt-1\">\n              <div class=\"absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none\">\n                <svg class=\"w-5 h-5 text-gray-500\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\"\n                    clip-rule=\"evenodd\"\n                  ></path>\n                </svg>\n              </div>\n              <input\n                type=\"text\"\n                id=\"table-search\"\n                class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-80 pl-10 p-2.5  \"\n                placeholder=\"Search for items\"\n                value={this.value}\n                onInput={e => this.handleChange(e)}\n              />\n            </div>\n          </div>\n\n          <table class=\"w-full text-sm text-left text-gray-500 \">\n            <thead class=\"text-xs text-gray-700 uppercase bg-gray-50\">\n              <tr>\n                {this.header.map(item => (\n                  <th scope=\"col\" onClick={() => this.sortData(item.title, item.sortDirection)} class=\"px-6 py-3 cursor-pointer\" title=\"click to sort data\">\n                    {item.title}\n                    {item.sortIcon}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n\n            <tbody>\n              {currentData.map(row => (\n                <tr class=\"bg-white border-b hover:bg-gray-50\">\n                  {this.header.map(item => (\n                    <td class=\"px-6 py-4\">{row[item.title] ?? <span>&#8212;</span>}</td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n\n            <tfoot>\n              <tr>\n                <td colSpan={5} class=\"py-4\">\n                  <div class=\"flex gap-2 items-center\">\n                    <plain-button\n                      color=\"gray-500\"\n                      disabledHandler={this.currentPage === 1}\n                      clickHandler={() => this.previousPage()}\n                      type=\"text\"\n                      addClass=\"bg-gray-200 hover:text-gray-700 disabled:opacity-50 \"\n                    >\n                      <span>Previous</span>\n                    </plain-button>\n\n                    <plain-button\n                      color=\"gray-500\"\n                      disabledHandler={totalPage === this.currentPage || currentData.length < this.dataPerPage}\n                      type=\"text\"\n                      clickHandler={() => this.nextPage()}\n                      addClass=\"bg-gray-200 hover:text-gray-700 disabled:opacity-50\"\n                    >\n                      Next\n                    </plain-button>\n\n                    <p class=\"pl-5\">\n                      Showing <strong>{indexOfFirstPost + 1}</strong> to <strong>{indexOfLastPost}</strong> of <strong>{this.body.length}</strong> results\n                    </p>\n                  </div>\n                </td>\n              </tr>\n            </tfoot>\n          </table>\n        </div>\n      </Host>\n    );\n  }\n}\n"]}