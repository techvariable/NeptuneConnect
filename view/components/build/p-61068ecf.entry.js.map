{"version":3,"sources":["src/components/editorPage/editor-page/editor-page.tsx"],"names":["EditorPage","[object Object]","hostRef","this","nodeList","queryDocument","parameterDocument","nodeData","nodeDataColumns","errorMessage","isLoading","loadingNodes","nodeError","fetchNavigators","axios","get","url","then","res","state","availableNodes","data","nodes","catch","err","console","log","btnClassType","true","false","formatter","transactionQuery","viewQuery","update","query","doc","toString","trim","transactionToFormatQuery","changes","from","to","length","insert","formatQuery","dispatch","transactionParameter","viewParameter","parameter","transactionToFormatParameter","formatJSON","JSON","parse","onClickRun","async","editorTextFlag","selectedNodeName","filter","order","isError","isCustomQuery","parameters","isValid","error","isValidParameterJson","timeTaken","post","hostUrl","queryParameter","result","isFetchedData","_b","_a","response","h","class","aria-label","color","size","title","clickHandler","loading","icon","xmlns","fill","viewBox","stroke-width","stroke","stroke-linecap","stroke-linejoin","d","style","maxHeight","overflowX","overflowY","minHeight","permissions","role"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { Component, h, Prop, State } from '@stencil/core';\n\nimport { isValidParameterJson } from '../../../utils/utils';\nimport state from '../store';\nimport { formatQuery } from 'gremlint';\nimport { formatJSON } from '../../../utils/utils';\n\n@Component({\n  tag: 'editor-page',\n  scoped: true,\n})\nexport class EditorPage {\n  @Prop() url: string;\n  @Prop() permissions: string;\n\n  @State() selectedNodeName: string;\n  @State() nodeList: string[] = [];\n  @State() queryDocument: string = '\\n\\n\\n\\n';\n  @State() parameterDocument: string = '\\n\\n\\n\\n';\n  @State() nodeData: Array<{}> = [];\n  @State() nodeDataColumns: {}[] = [];\n  @State() errorMessage: string | null = null;\n  @State() isLoading: boolean = false;\n  @State() loadingNodes: boolean = false;\n  @State() nodeError: string | null = null;\n\n  componentWillLoad() {\n    state.hostUrl = this.url;\n    this.fetchNavigators();\n  }\n\n  fetchNavigators = () => {\n    this.loadingNodes = true;\n    this.errorMessage = null;\n    this.nodeError = null;\n    axios\n      .get(`${this.url}/nodes`)\n      .then((res: any) => {\n        state.availableNodes = res.data.nodes;\n        this.loadingNodes = false;\n      })\n      .catch(err => {\n        this.loadingNodes = false;\n        this.nodeError = err;\n        console.log(err);\n      });\n  };\n\n  btnClassType = {\n    true: `mr-4 animate-spin`,\n    false: `mr-4`,\n  };\n\n  formatter = () => {\n    let transactionQuery = state.viewQuery.state.update();\n    const query = transactionQuery.state.doc.toString().trim();\n\n    let transactionToFormatQuery = state.viewQuery.state.update({\n      changes: { from: 0, to: state.viewQuery.state.doc.toString().length, insert: `${formatQuery(query)}` },\n    });\n    state.viewQuery.dispatch(transactionToFormatQuery);\n\n    let transactionParameter = state.viewParameter.state.update();\n    const parameter = transactionParameter.state.doc.toString().trim();\n\n    let transactionToFormatParameter = state.viewParameter.state.update({\n      changes: { from: 0, to: state.viewParameter.state.doc.toString().length, insert: `${formatJSON(JSON.parse(parameter))}` },\n    });\n    state.viewParameter.dispatch(transactionToFormatParameter);\n  };\n\n  onClickRun = async () => {\n    if (state.editorTextFlag) {\n      state.selectedNodeName = null;\n      state.filter = {};\n      state.order = {};\n      state.isError = false;\n      state.errorMessage = null;\n      state.isLoading = true;\n      state.isCustomQuery = true;\n\n      try {\n        let transactionQuery = state.viewQuery.state.update();\n        const query = transactionQuery.state.doc.toString().trim();\n        state.viewQuery.dispatch(transactionQuery);\n\n        let transactionParameter = state.viewParameter.state.update();\n        const parameters = transactionParameter.state.doc.toString().trim();\n        state.viewParameter.dispatch(transactionParameter);\n\n        const { isValid, error } = isValidParameterJson(query, parameters);\n\n        if (isValid) {\n          state.timeTaken = null;\n          const res = await axios.post(`${state.hostUrl}/query/`, {\n            query,\n            parameters: JSON.parse(parameters),\n          });\n          state.query = query;\n          state.queryParameter = parameters;\n          state.nodes = res.data.result;\n          state.timeTaken = res.data.timeTaken;\n          state.isFetchedData = true;\n          this.formatter();\n        } else {\n          state.isError = true;\n          state.errorMessage = error;\n        }\n      } catch (error) {\n        console.log({ error });\n        state.isError = true;\n        state.errorMessage = error?.response?.data?.error ? error.response.data.error : 'Failed to fetch data from db server.';\n      }\n      state.isLoading = false;\n    }\n  };\n\n  render() {\n    return (\n      <div class=\"mx-4\">\n        <div class=\"w-full lg:flex justify-center gap-4 mt-4\">\n          <div>\n            <aside class=\"w-full lg:w-80\" aria-label=\"Sidebar\">\n              <div class=\"w-full flex justify-between \">\n                <h2 class=\"font-mono text-lg font-bold leading-7 text-gray-600\">Nodes</h2>\n                <icon-button-basic\n                  color=\"secondary\"\n                  size=\"md\"\n                  title=\"Refresh Nodes\"\n                  clickHandler={() => this.fetchNavigators()}\n                  loading={this.loadingNodes}\n                  icon={\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-7 h-7\">\n                      <path\n                        stroke-linecap=\"round\"\n                        stroke-linejoin=\"round\"\n                        d=\"M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99\"\n                      />\n                    </svg>\n                  }\n                />\n              </div>\n              <div class=\"custom-scrollbar \" style={{ maxHeight: '43.5rem', overflowX: 'visible', overflowY: 'auto', minHeight: '20rem' }}>\n                <node-item nodeError={this.nodeError}></node-item>\n              </div>\n            </aside>\n          </div>\n          <div class=\"w-full md:w-3/4\">\n            <h2 class=\"pb-3 font-mono text-lg font-bold leading-7 text-gray-600\">Write your Gremlin Query Here</h2>\n            <code-editor formatter={() => this.formatter()} onClickRun={this.onClickRun} fetchNavigators={this.fetchNavigators} permissions={this.permissions}></code-editor>\n            {state.isFetchedData && state.nodes.length === 0 && !state.isLoading && !state.isError && (\n              <div class=\"flex items-center bg-gray-500 text-white text-sm font-bold px-4 py-3\" role=\"alert\">\n                <p>No Data Found in Database</p>\n              </div>\n            )}\n            {state.nodes.length > 0 && !state.isLoading && !state.isError && <tab-component permissions={this.permissions}></tab-component>}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"]}